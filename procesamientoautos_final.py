# -*- coding: utf-8 -*-
"""ProcesamientoAutos_final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kS5-dHnmjMjM4gxjAn6e9n1CGnRDz75O
"""

import pandas as pd
import matplotlib.pylab as plt
import numpy as np
import statistics as stat
import seaborn as sns

url = "/content/autos.csv"
df = pd.read_csv(url,header=None)
df.head(5)

df.drop([0], inplace=True)
df.reset_index(drop=True, inplace=True)

df.head(5)
headers = ['symboling', 'normalized_losses', 'make', 'fuel_type', 'aspiration', 'num_doors', 'body_style',
           'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight',
           'engine_type', 'num_cylinders', 'engine_size', 'fuel_system', 'bore','stroke', 'compression_ratio',
           'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price']

df.columns = headers
df.head(5)

df.replace("?", np.nan, inplace = True)
df.head(5)

missing_data = df.isnull()
missing_data.head(5)

for column in missing_data.columns.values.tolist():
  print(column)
  print(missing_data[column].value_counts())
  print("")

avg_norm_loss = df["normalized_losses"].astype("float").mean(axis=0)
print("Average of normalizad-losses:", avg_norm_loss)

df["normalized_losses"].replace(np.nan, avg_norm_loss, inplace=True)

avg_bore=df['bore'].astype('float').mean(axis=0)
print("Average of bore:", avg_bore)

df["bore"].replace(np.nan, avg_bore, inplace=True)

avg_stroke=df['stroke'].astype('float').mean(axis=0)
print("Average of stroke:", avg_stroke)

df["stroke"].replace(np.nan, avg_stroke, inplace=True)

avg_horsepower=df['horsepower'].astype('float').mean(axis=0)
print("Average of horsepower:", avg_horsepower)

df["horsepower"].replace(np.nan, avg_horsepower, inplace=True)

avg_peakrpm=df['peak_rpm'].astype('float').mean(axis=0)
print("Average of peak rpm:", avg_peakrpm)

df["peak_rpm"].replace(np.nan, avg_horsepower, inplace=True)

df['num_doors'].value_counts().idxmax()

df['num_doors'].replace(np.nan, "four", inplace=True)

df.dropna(subset=["price"], axis=0, inplace=True)

df.reset_index(drop=True, inplace=True)

df.head()

df.dtypes

df[["bore", "stroke"]] = df[["bore" , "stroke"]].astype("float")
df[["normalized_losses"]] = df[["normalized_losses"]].astype("int")
df[["price"]] = df[["price"]].astype("int")
df[["peak_rpm"]] = df[["peak_rpm"]].astype("float")
df[["city_mpg"]] = df[["city_mpg"]].astype("int")
df[["highway_mpg"]] = df[["highway_mpg"]].astype("int")
df[["length", "width", "height"]] = df[["length", "width", "height"]].astype("float")

df.dtypes

df.head()

df['city-L/100km'] = 235/df["city_mpg"]
df.head()

df["highway_mpg"]= 235/df["highway_mpg"]
df.rename(columns={'"highway_mpg"':'highway-L/100km'}, inplace=True)
df.head()

df['length'] = df['length']/df['length'].max()
df['width'] = df['width']/df['width'].max()

df['height'] = df['height']/df['width'].max()
df[["length", "width", "height"]].head()

df.columns

dummy_variable_1=pd.get_dummies(df['fuel_type'])
dummy_variable_1.head()

dummy_variable_1.rename(columns={'gas': 'fuel-type-gas', 'diesel':'fuel-type-diesel'}, inplace=True)
dummy_variable_1.head()

df=pd.concat([df, dummy_variable_1], axis=1)
df.drop("fuel_type", axis = 1, inplace=True)

df.head()

dummy_variable_2 = pd.get_dummies(df['aspiration'])
dummy_variable_2.rename(columns={'std':'aspiration-std', 'turbo': 'aspiration-turbo'}, inplace=True)
dummy_variable_2.head()

df=pd.concat([df, dummy_variable_2], axis=1)
df.drop('aspiration', axis = 1, inplace=True)

df.to_csv('clean_df.csv')

sns.boxplot(x="body_style", y="price", data=df)

sns.boxplot(x="engine_location", y="price", data=df)

sns.boxplot(x="drive_wheels", y="price", data=df)

df.describe()

df.describe(include=['object'])

df['drive_wheels'].value_counts()

df['drive_wheels'].value_counts().to_frame()

drive_wheels_counts = df['drive_wheels'].value_counts().to_frame()
drive_wheels_counts.rename(columns={'drive_wheels': 'value_counts'}, inplace=True)
drive_wheels_counts

engine_location_counts = df['engine_location'].value_counts().to_frame()
engine_location_counts.rename(columns={'engine_location': 'value_counts'}, inplace=True)
engine_location_counts.index.name = 'engine_location'
engine_location_counts.head(10)